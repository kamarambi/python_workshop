###Python Bioinformatics Workshop::
##Instructor: Robert Harbert
##This is part of the AMNH Sackler Institute for Comparative Genomics workshop series
##Date: May 9, 2018

##This workshop will cover:
#1) Insalling and running Python and Anaconda for package management
#2) Data and variable types and structures
#3) Reading and writing common file types (csv)
#4) Basic programming in Python through interactive and scripted sessions
#5) Using some common libraries in Bioinformatics

####To install Python
#MacOS
https://conda.io/docs/user-guide/install/macos.html
#Windows
https://conda.io/docs/user-guide/install/windows.html



##Running Python Interactively
python

#Variables
#integers
x=2;
#floating points
y = 2.2;
#In Python these interchange pretty well
x+y


#string
str = 'The quick brown fox jumps over the lazy log';
str[0]
str[1]
str[0:8]

#array
arr = [0,1,2,3,4]
twodarr = [arr, arr, arr, arr]
twodarr[1]
twodarr[1][1] #row 1 column 1
##This is unwieldly so if you want R data.frame like objects us Pandas in Python

#tuple
tup = (0,1,2,3)
tup_b = ('the', 'quick', 'brown', 'fox')

#dictionaries/Hash tables
translation = {'one': 1, 'two': 2}
translation['one']

#Accessing hashes
for key, value in translation.items():
    print(key, '->', value)




#Operations
y=x**2 ##should operate on x and return the square of x

x==2
x==3 #Not variable assignments but logical comparisons
x>1



#Operators on strings: +
str1 = 'Hello';
str2 = 'world';
mer=str1+str2
str1+" "+str2+"!"

##Comparing strings: Is str1 the same as str2?
str1==str2 ##Note double equals sign
#but be careful:
str1>str2 #What?
str2>str1 #Why?

##If you don't know what 'type' a variable is try:
type(str1)
type(x)

#if you want to be explicit about variable types use the built in functions when defining:
str1 = str('some')
int1 = int(1) #integer type
float1 = float(3.5) #decimal type


#Indexing:
#Technically, the string variable is a list of character values that can be accessed independently or in sets:
mer[0]
mer[1:8]

#Create a list object
list1 = [1,2,3,4]
list[1] #return second element in list1
list2 = [1,2,'var',4,'odd'] #mix variable types for some reason

##Create a sequence of integers:
list3 = range(2,20)
list4 = range(2,20,2)


#######################################################
###Loops: Repeat a process

##Structure of a loop

#Example
arr = range(10)
for i in arr:
    print(i**3);




#######################################################
#modules and 'import'
import random

bases=["A","C","G","T"]
#join
''.join(bases)
' '.join(bases)
'_'.join(bases)
"\t".join(bases)


random.choice(bases)

n=1999;
seq=range(n);
for i in range(0,n):
    seq[i] = random.choice(bases)

''.join(seq)



seq = ''.join(random.choice(bases) for _ in range(n))





#####################################################
#Regular Expressions: How to search strings in Python
import re; ##Import the re library
m=re.findall("TTT",seq)
len(m) #the number of matches to TTT in seq

#re.sub(pattern, replace, string)

##read text file
with open ("./data/98.txt", "r") as myfile:
    data=myfile.read()

it=re.findall("It", data)
itwas=re.findall("It was", data)
itwasthe=re.findall("It was the ", data)
itwasthebest=re.findall("It was the best", data)

##Challenge:
#How many words are there in this file?

#How many lines?

#How many chapters?


#For object seq
#find all start codons AUC
#substitute T to U
transl = re.sub('T', 'U', seq)
#find AUC
startc = re.findall("AUC", transl)

#get position of first match
m = re.search("AUC", transl);
m.span(); #will give start and end of first match..

#get position of all matches
m2 = re.finditer("AUC", transl) #returns an iterator object, must loop
for n in m2:
    print(n.span())
    print(transl[n.span()])


#######################################################
##Functions in Python
#









