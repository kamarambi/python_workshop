###Python Bioinformatics Workshop::
##Instructor: Robert Harbert
##This is part of the AMNH Sackler Institute for Comparative Genomics workshop series
##Date: May 9, 2018

##This workshop will cover:
#1) Insalling and running Python and Anaconda for package management
#2) Data and variable types and structures
#3) Reading and writing common file types (csv)
#4) Basic programming in Python through interactive and scripted sessions
#5) Using some common libraries in Bioinformatics

####To install Python
#MacOS
https://conda.io/docs/user-guide/install/macos.html
#Windows
https://conda.io/docs/user-guide/install/windows.html



##Running Python Interactively
python

#Variables
x=2;
str = 'The quick brown fox jumps over the lazy log';
arr = [0,1,2,3,4]

#Operations
y=x**2 ##should operate on x and return the square of x

x==2
x==3 #Not variable assignments but logical comparisons
x>1



#Operators on strings: +
str1 = 'Hello';
str2 = 'world';
mer=str1+str2
str1+" "+str2+"!"

##Comparing strings: Is str1 the same as str2?
str1==str2 ##Note double equals sign
#but be careful:
str1>str2 #What?
str2>str1 #Why?

##If you don't know what 'type' a variable is try:
type(str1)
type(x)

#if you want to be explicit about variable types use the built in functions when defining:
str1 = str('some')
int1 = int(1) #integer type
float1 = float(3.5) #decimal type


#Indexing:
#Technically, the string variable is a list of character values that can be accessed independently or in sets:
mer[0]
mer[1:8]

#Create a list object
list1 = [1,2,3,4]
list[1] #return second element in list1
list2 = [1,2,'var',4,'odd'] #mix variable types for some reason

##Create a sequence of integers:
list3 = range(2,20)
list4 = range(2,20,2)

#Loops

arr = range(10)
for i in arr:
    print(i**3);

bases=["A","C","G","T"]
#join
''.join(bases)
' '.join(bases)
'_'.join(bases)
"\t".join(bases)

#modules and 'import'
import random
random.choice(bases)

n=1999;
seq=range(n);
for i in range(0,n):
    seq[i] = random.choice(bases)

''.join(seq)



seq = ''.join(random.choice(bases) for _ in range(n))


#Regular Expressions: How to search strings in Python

m=re.findall("TAC",seq)
len(m) #the number of matches to CCG in seq

#re.sub(pattern, replace, string)






