for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df
nrow(df)
df[,2] = paste(df[,2], df[,3]);
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3]);
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3], sep = ' ');
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3], sep = '_');
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3], sep = '_');
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
#df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
gbif_get <- function(taxon, maxrec = 200000) {
# require('jsonlite');
#require('urltools')
n = 0
round = 0
hold = list()
offset = 0
tori = taxon;
taxon = urltools::url_encode(taxon)
while (n < 1) {
html_str = paste(
"https://api.gbif.org/v1/occurrence/search?scientificName=",
taxon,
"&limit=300&offset=",
offset,
sep = ''
)
jsonget = jsonlite::fromJSON(html_str)
round = round + 1
if (is.null(nrow(jsonget$results))) {
print("ERR: 11")
return(jsonget)
} else {
hold[[round]] = jsonget$results
}
if (jsonget$endOfRecords == TRUE) {
n = 1
} else {
offset = offset + 300
}
if (offset > maxrec) {
break
}
}
cols = c('key',
'genus',
'specificEpithet',
'decimalLatitude',
'decimalLongitude');
df = hold[[1]][, c(cols )]
if (length(hold) > 1) {
for (n in 2:length(hold)) {
# print(n);
if(sum(cols %in% colnames(hold[[n]]))==4){
nex = hold[[n]][, c(cols)]
df = rbind(df, nex)
} else {next;}
}
}
df[,2] = paste(df[,2], df[,3]);
df = df[,-3];
colnames(df) = c('ind_id', 'tax', 'lat', 'lon')
#df$tax = rep(tori, nrow(df));
return(df)
}
gbif_get(taxon)
24709000*(1000*1000)
24709000*(1000*1000) * 8*2/1000/1000/1000
24709000*(1000*1000) * 16 /1000/1000/1000
(24709000*(1000*1000) * 16) /1000/1000/1000
(24709000*(1000*1000) * 16) /1000/1000/1000/1000
5,700,000,000
5700000000
5700000000*16/1000/1000/1000
(5700000000*16)/1000/1000/1000
r = raster::raster('~/Desktop/cracle_testing/bio.gri')
r
31104000 *19
(31104000 *19) *16 /1000/1000/1000
(31104000*25 *19) *16 /1000/1000/1000
31104000*25
236/16
?densform
library(vegdistmod)
?densform
(300-(300*15))+150
(300-(300*.15))+150
600-(600*0.15)
600-(600*0.15) - 150
450-(450*0.15)
4814-1500-700
g = getextr('Abies lasiocarpa', clim = clim)
source('~/Desktop/cracle_testing/vegdistmod/R/get_gbif_direct.R')
g = getextr('Abies lasiocarpa', clim = clim)
clim = raster::stack('~/Desktop/phytoclim.gri')
clim = clim[[1]]
g = getextr('Abies lasiocarpa', clim = clim)
g
g = getextr(c('Abies lasiocarpa', 'Abies lasiocarpus'), clim = clim)
g
g = getextr(c('Abies lasiocarpus'), clim = clim)
g
g = getextr(c('Empetrum nigrum'), clim = clim)
g
ext = extent(c(-125, -40, 10, 66))
clim = crop(clim, ext)
g = getextr(c('Empetrum nigrum'), clim = clim)
g
source('~/Desktop/cracle_testing/vegdistmod/R/get_gbif_direct.R')
g = getextr(c('Empetrum nigrum'), clim = clim)
g
2**2
2**2
2^2
exp(2)
2exp(2)
exp(2)
exp(1)
2759*26
2754*26
2754*15
2754*15+(67403/26)*12
2754*15+(67403/26)*12 +2450
2754*12+(67403/26)*12 +2450
2754*13+(67403/26)*12 +2450
install.packages(ggmap)
install.packages('ggmap')
sisquoc <- read.table("data/sisquoc-points.txt", sep = "\t", header = TRUE)
library(ggmap)
manbox = make_bbox(lon = -74.044, lon = 40.6191507, f = 0.04)
manbox = make_bbox(lon = -74.044, lat = 40.6191507, f = 0.04)
manbox
man_map = get_map(location=manbox, maptype = 'satellite', source='google')
ggmap(manmap)
manbox = make_bbox(lon = -74.044, lat = 40.6191507, f = 0.1)
manbox
?make_bbox
manbox = make_bbox(lon = -74.044, lat = 40.6191507, f = 0.5)
manbox
loc = cbind(c(-74.0440, -74.0441, -74.038), c(40.618, 40.620, 40.635))
loc
loc = as.data.frame(loc)
loc = cbind(c(-74.0440, -74.0441, -74.038), c(40.618, 40.620, 40.635))
loc = as.data.frame(loc)
colnames(loc) = c('lon', 'lat')
manbox <- make_bbox(lon = loc$lon, lat = loc$lat, f = .1)
manbox
manmap <- get_map(location = manbox, maptype = "satellite", source = "google")
ggmap(manmap)
install.packages('ggproto')
ggmap(manmap)
manmap
plot(manmap)
points(loc)
loc
ggmap(manmap)
devtools::install_github('AndreaCirilloAC/updateR')
updateR(password='Roanoke1999')
library(updateR)
updateR(admin_password='Roanoke1999')
install.packages(as.vector(needed_packages))
version()
library(reticulate)
use_python('/usr/bin/python')
knitr::opts_chunk$set(echo = TRUE)
coord
?reticulate
py='#!/usr/bin/python
str="hello world"
print(str)
quit() #Can skip this, will exit at end of file'
pp = source_python(py)
pp
library(reticulate)
import(pandas)
import('pandas')
ls()
import('pandas')
pd = import('pandas')
pd
knit_with_parameters('~/pandas.Rmd')
require(raster)
grid = raster::raster(nrows=81, ncols=162, xmn=-180, xmx=180, ymn=-90, ymx=90, vals=NULL)
grid = raster::setValues(grid,values=(as.vector(seq(1:raster::ncell(grid)))))
points = cbind(
c(seq(xmin(grid), xmax(grid), length.out=1000),
seq(xmax(grid), xmin(grid), length.out=1000)),
c(seq(ymin(grid), ymax(grid), length.out=100),
seq(ymin(grid), ymax(grid), length.out=100))
)
plot(grid); points(points);
di = dist2point(grid, points, parallel=TRUE, maxram = 0.5, nclus = 4, dist.method='Pythagorean')
plot(di, col = viridis::viridis(9))
library(rasterExtras)
di = dist2point(grid, points, parallel=TRUE, maxram = 0.5, nclus = 4, dist.method='Pythagorean')
plot(di, col = viridis::viridis(9))
plot(di, col = viridis::viridis(9))
points(points)
di
plot(di)
points(points)
di = dist2point(grid, points, parallel=TRUE, maxram = 0.5, nclus = 4, dist.method='Haversine')
plot(di, col = viridis::viridis(9))
plot(di)
library(ggmap)
loc = cbind(c(-74.0440, -74.0441, -74.038), c(40.618, 40.620, 40.635))
loc = as.data.frame(loc)
colnames(loc) = c('lon', 'lat')
bkbox <- make_bbox(lon = loc$lon, lat = loc$lat, f = .1)
bkmap <- get_map(location = bkbox, maptype = "satellite", source = "google", zoom =14)
ggmap(bkmap) +
geom_point(data = loc,
color = "red",
size =4)
ggmap(bkmap) +
geom_point(data = loc,
color = "red",
size =4)
bkmap
ll_means <- sapply(loc[1:2], mean)
bkmap2 <- get_map(location = ll_means,  maptype = "satellite", source = "google", zoom = 15)
ggmap(bkmap2) +
geom_point(data = loc,
color = "red",
size =4)
bkmap3 <- get_map(location = ll_means,  maptype = "terrain", source = "google", zoom = 15)
bkmap3 <- get_map(location = ll_means,  maptype = "terrain", source = "google", zoom = 15)
bkmap3 <- get_map(location = ll_means,  maptype = "terrain", source = "google", zoom = 12)
ggmap(bkmap3) +
geom_point(data = loc,
color = "red",
size =4)
library(tidyverse)
library(mapdata)
install.packages('viridis')
di = dist2point(grid, points, parallel=TRUE, maxram = 0.5, nclus = 4, dist.method='Haversine')
plot(di, col = viridis::viridis(9))
points(points)
packageVersion("rmarkdown")
packageVersion('knitr')
py_config()
library(reticulate)
use_python('/usr/bin/python')
library(reticulate)
use_virtualenv("r-reticulate")
py_available(TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r}
py_config()
import(pandas)
import('pandas')
import('pandas')
py_config()
py_module_available()
py_module_available('pandas')
py_module_available('Bio')
py_module_available('kera')
py_module_available('keras')
py_module_available('scikitlearn')
py_config()
import('pandas')
library(reticulate)
use_python('/usr/bin/python')
library(reticulate)
use_virtualenv("r-reticulate")
py_available(TRUE)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd('~/GitHub/python_workshop/')
read.csv('./data/mtcars.csv')
read.csv('./data/mtcars.csv')
getwd()
library(reticulate)
use_python('/usr/bin/python2')
setwd("~/GitHub/python_workshop/")
```{r}
py_config()
library(reticulate)
use_python('/usr/bin/python')
```{r}
py_config()
getwd()
py_config()
